{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initialState","name","email","phone_number","address","gender","age","maritial_status","App","onChange","event","value","target","setState","onSubmit","preventDefault","alert","state","className","class","this","type","href","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAGMA,EAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,aAAc,GACdC,QAAS,GACTC,OAAQ,GACRC,IAAK,GACLC,gBAAiB,IAiFJC,E,kDA7Eb,aAAe,IAAD,8BACZ,gBAIFC,SAAW,SAACC,GACV,IAAMC,EAAQD,EAAME,OAAOD,MAC3B,EAAKE,SAAL,eACGH,EAAME,OAAOX,KAAOU,KARX,EAYdG,SAAW,SAACJ,GAGVA,EAAMK,iBACNC,MAAM,SAAW,EAAKC,MAAMhB,KACpB,YAAc,EAAKgB,MAAMf,MACzB,mBAAqB,EAAKe,MAAMd,aAChC,cAAgB,EAAKc,MAAMb,QAC3B,aAAe,EAAKa,MAAMZ,OAC1B,UAAY,EAAKY,MAAMX,MAnB/B,EAAKW,MAAQjB,EAFD,E,0CAyBd,WACE,OACE,sBAAKkB,UAAU,UAAf,UACE,wDACA,iCACE,sBAAKC,MAAM,YAAX,UACE,uBAAOlB,KAAK,OAAOU,MAAOS,KAAKH,MAAMhB,KAAMoB,KAAK,OAAOZ,SAAUW,KAAKX,WACtE,4CAEF,uBACA,sBAAKU,MAAM,YAAX,UACE,uBAAOlB,KAAK,QAAQU,MAAOS,KAAKH,MAAMf,MAAOmB,KAAK,OAAOZ,SAAUW,KAAKX,WACxE,6CAEF,uBACA,sBAAKU,MAAM,YAAX,UACE,uBAAOlB,KAAK,eAAeU,MAAOS,KAAKH,MAAMd,aAAckB,KAAK,SAASZ,SAAUW,KAAKX,WACxF,oDAEF,uBACA,sBAAKU,MAAM,YAAX,UACE,uBAAOlB,KAAK,UAAUU,MAAOS,KAAKH,MAAMb,QAASiB,KAAK,OAAOZ,SAAUW,KAAKX,WAC5E,+CAEF,uBACA,sBAAKU,MAAM,YAAX,UACE,yBAAQlB,KAAK,SAASU,MAAOS,KAAKH,MAAMZ,OAAQI,SAAUW,KAAKX,SAA/D,UACE,wBAAQE,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,sBAEF,8CAEF,uBACA,sBAAKQ,MAAM,YAAX,UACE,uBAAOlB,KAAK,MAAMU,MAAOS,KAAKH,MAAMX,IAAKe,KAAK,SAASZ,SAAUW,KAAKX,WACtE,6CAEF,uBACA,oBAAGa,KAAK,IAAIC,QAASH,KAAKN,SAA1B,UACE,yBACA,yBACA,yBACA,yBAJF,sB,GAjEQU,aCDHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26725881.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst initialState = {\n  name: '',\n  email: '',\n  phone_number: '',\n  address: '',\n  gender: '',\n  age: '',\n  maritial_status: ''\n}\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  onChange = (event) => {\n    const value = event.target.value;\n    this.setState({\n      [event.target.name]: value\n    })\n  }\n\n  onSubmit = (event) => {\n    //Typically, we would run a fetch POST here to hit the API endpoint and accept the values to the backend.\n    //However, since we do not have a backend, we display submitted values in an alert.\n    event.preventDefault();\n    alert('Name: ' + this.state.name\n          + '\\nEmail: ' + this.state.email\n          + '\\nPhone Number: ' + this.state.phone_number\n          + '\\nAddress: ' + this.state.address\n          + '\\nGender: ' + this.state.gender\n          + '\\nAge: ' + this.state.age\n        );\n  }\n\n  render() {\n    return (\n      <div className=\"app-box\">\n        <h2>Form Handling Practice</h2>\n        <form>\n          <div class='input-box'>\n            <input name='name' value={this.state.name} type='text' onChange={this.onChange} />\n            <label>Name</label>\n          </div>\n          <br />\n          <div class='input-box'>\n            <input name='email' value={this.state.email} type='text' onChange={this.onChange} />\n            <label>Email</label>\n          </div>\n          <br />\n          <div class='input-box'>\n            <input name='phone_number' value={this.state.phone_number} type='number' onChange={this.onChange} />\n            <label>Phone Number</label>\n          </div>\n          <br />\n          <div class='input-box'>\n            <input name='address' value={this.state.address} type='text' onChange={this.onChange} />\n            <label>Address</label>\n          </div>\n          <br />\n          <div class='input-box'>\n            <select name='gender' value={this.state.gender} onChange={this.onChange} >\n              <option value='Male'>Male</option>\n              <option value='Female'>Female</option>\n              <option value='Other'>Other</option>\n            </select>\n            <label>Gender</label>\n          </div>\n          <br />\n          <div class='input-box'>\n            <input name='age' value={this.state.age} type='number' onChange={this.onChange} />\n            <label>Age: </label>\n          </div>\n          <br />\n          <a href='#' onClick={this.onSubmit}>\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n            Submit\n          </a>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}